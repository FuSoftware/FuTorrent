#ifndef TRACKER_H
#define TRACKER_H

#include <vector>
#include <string>
#include "torrent/torrentfile.h"

//https://wiki.theory.org/index.php/BitTorrentSpecification#Tracker_HTTP.2FHTTPS_Protocol

struct Peer
{
    std::string id;
    std::string ip;
    int port;
};

struct HttpTrackerRequest
{
    std::string info_hash; //urlencoded 20-byte SHA1 hash of the value of the info key from the Metainfo file
    std::string peer_id; //urlencoded 20-byte string used as a unique ID for the client, generated by the client at startup
    int port; //Port which is listenening
    int uploaded; //Total uploaded bytes
    int downloaded; //Total downloaded bytes
    int left; //The number of bytes this client still has to download
    bool compact; //Setting this to 1 indicates that the client accepts a compact response
    bool no_peer_id; //Indicates that the tracker can omit peer id field in peers dictionary. This option is ignored if compact is enabled.
    std::string event; //If specified, must be one of started, completed, stopped, (or empty which is the same as not being specified). If not specified, then this request is one performed at regular intervals.
    std::string ip;
    int numwant;
    std::string key;
    std::string trackerid;
};

struct HttpTrackerResponse
{
    std::string failure_reason;
    std::string warning_message;
    int interval;
    int min_interval;
    std::string tracker_id;
    int complete; //Seeders
    int incomplete; //Leechers
    std::vector<Peer> peers;
};


class Tracker
{
public:
    Tracker(std::string url, TorrentFile* parent);

    virtual void request() = 0;
    virtual void request(HttpTrackerRequest req) = 0;
    static HttpTrackerResponse parseResponse(std::string data);

protected:
    std::string getDummyParameters();
    std::string getParameters();
    static std::string getParameters(HttpTrackerRequest request);

    std::string url;
    TorrentFile *parent;

};

#endif // TRACKER_H
